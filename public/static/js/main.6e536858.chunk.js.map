{"version":3,"sources":["services/firebase.ts","contexts/AuthContext.tsx","assets/images/logo.svg","assets/images/delete.svg","assets/images/check.svg","assets/images/answer.svg","components/Button.tsx","components/Question/index.tsx","assets/images/copy.svg","components/RoomCode.tsx","hooks/useAuth.ts","hooks/useRoom.ts","pages/AdminRoom.tsx","assets/images/illustration.svg","assets/images/google-icon.svg","pages/Home.tsx","pages/NewRoom.tsx","pages/Room.tsx","App.tsx","index.tsx"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","database","AuthContext","createContext","AuthContextProvider","props","useState","user","setUser","a","provider","GoogleAuthProvider","signInWithPopup","result","displayName","photoURL","uid","Error","id","name","avatar","useEffect","unsubscribe","onAuthStateChanged","Provider","value","signInWithGoogle","children","Button","isOutlined","className","Question","content","author","isAnswered","isHighlighted","cx","answered","highlighted","src","alt","RoomCode","onClick","navigator","clipboard","writeText","code","copyImg","useAuth","useContext","useRoom","roomId","questions","setQuestions","title","setTitle","roomRef","ref","on","room","databaseRoom","val","firebaseQuestions","parsedQuestions","Object","entries","map","key","likeCount","values","likes","length","likeId","find","authorId","off","AdminRoom","history","useHistory","useParams","questionId","window","confirm","remove","update","endedAt","Date","push","logoImg","question","type","handleCheckQuestionAsAnswered","checkImg","handleHighlightQuestion","answerImg","handleDeleteQuestion","deleteImg","Home","setRoomCode","event","preventDefault","trim","get","exists","alert","imgHome","imgLogo","imgLogoGoogle","onSubmit","placeholder","onChange","target","NewRoom","newRoow","setNewRoom","firebaseRoom","to","Room","newQuestion","setNewQuestion","disabled","aria-label","handleLikeQuestion","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e536858.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n  };\r\n\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  const auth = firebase.auth();\r\n  const database = firebase.database();\r\n\r\n  export {firebase, auth, database};","import { createContext, ReactNode, useState, useEffect } from 'react';\r\nimport { auth, firebase } from '../services/firebase';\r\n\r\n\r\ntype AuthContextType = {\r\n    user: User | undefined;\r\n    signInWithGoogle: () => Promise<void>;\r\n}\r\n\r\ntype User = {\r\n    id: string,\r\n    name: string,\r\n    avatar: string\r\n}\r\n\r\ntype AuthContextProviderProps = {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const AuthContext = createContext({} as AuthContextType);\r\n\r\nexport function AuthContextProvider(props: AuthContextProviderProps) {\r\n    const [user, setUser] = useState<User>();\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged(user => {\r\n            if (user) {\r\n                const { displayName, photoURL, uid } = user;\r\n\r\n                if (!displayName || !photoURL) {\r\n                    throw new Error('Missing information from Google Account.');\r\n                }\r\n\r\n                setUser({\r\n                    id: uid,\r\n                    name: displayName,\r\n                    avatar: photoURL\r\n                })\r\n            };\r\n        })\r\n\r\n        return () => {\r\n            unsubscribe();\r\n        }\r\n    }, []);\r\n\r\n    async function signInWithGoogle() {\r\n        const provider = new firebase.auth.GoogleAuthProvider();\r\n        const result = await auth.signInWithPopup(provider);\r\n\r\n        if (result.user) {\r\n            const { displayName, photoURL, uid } = result.user;\r\n\r\n            if (!displayName || !photoURL) {\r\n                throw new Error('Missing information from Google Account.');\r\n            }\r\n\r\n            setUser({\r\n                id: uid,\r\n                name: displayName,\r\n                avatar: photoURL\r\n            })\r\n        };\r\n\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ user, signInWithGoogle }}>\r\n            {props.children}\r\n      </AuthContext.Provider>\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/logo.a88331cb.svg\";","export default __webpack_public_path__ + \"static/media/delete.22ba6e00.svg\";","export default __webpack_public_path__ + \"static/media/check.5dfa6ed6.svg\";","export default __webpack_public_path__ + \"static/media/answer.4502a8d5.svg\";","import { ButtonHTMLAttributes } from \"react\";\r\nimport \"../styles/button.scss\";\r\n\r\ntype ButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & {\r\n    isOutlined?: boolean;\r\n};\r\n\r\nexport function Button({ isOutlined = false, ...props }: ButtonProps) {\r\n    return (\r\n        <button className={`button ${isOutlined ? 'outlined' : ''}`} {...props} />\r\n    )\r\n}","import { ReactNode } from 'react';\r\nimport cx from 'classnames';\r\nimport './styles.scss';\r\n\r\ntype QuestionProps = {\r\n    content: string;\r\n    author: {\r\n        name: string;\r\n        avatar: string;\r\n    };\r\n    children?: ReactNode;\r\n    isAnswered?: boolean;\r\n    isHighlighted?: boolean;\r\n};\r\n\r\nexport function Question({\r\n    content,\r\n    author,\r\n    isAnswered = false,\r\n    isHighlighted = false,\r\n    children,\r\n}: QuestionProps) {\r\n    return (\r\n        <div\r\n            className={cx(\r\n                'question',\r\n                { answered: isAnswered },\r\n                { highlighted: isHighlighted && !isAnswered }\r\n            )}>\r\n            <p>{content}</p>\r\n            <footer>\r\n                <div className=\"user-info\">\r\n                    <img src={author.avatar} alt={author.name} />\r\n                    <span>{author.name}</span>\r\n                </div>\r\n                <div>\r\n                    {children}\r\n                </div>\r\n            </footer>\r\n        </div >\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/copy.2f36f99e.svg\";","import copyImg from '../assets/images/copy.svg';\r\nimport '../styles/room-code.scss';\r\n\r\ntype RoomCodeProps = {\r\n    code: string;\r\n}\r\n\r\nexport function RoomCode(props: RoomCodeProps) {\r\n    function copyRoomCode() {\r\n        navigator.clipboard.writeText(props.code);\r\n    }\r\n\r\n    return(\r\n        <button className=\"room-code\" onClick={copyRoomCode}>\r\n            <div>\r\n                <img src={copyImg} alt=\"Copy room code\" />\r\n            </div>\r\n            <span>Sala {props.code}</span>\r\n        </button>\r\n    );\r\n}","import { useContext } from 'react';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\n\r\nexport function useAuth() {\r\n    const value = useContext(AuthContext);\r\n\r\n    return value;\r\n}","import { useEffect, useState } from 'react';\r\nimport { database } from '../services/firebase';\r\nimport { useAuth } from './useAuth';\r\n\r\ntype QuestionType = {\r\n    id: string,\r\n    author: {\r\n        name: string;\r\n        avatar: string;\r\n    }\r\n    content: string;\r\n    isAnswered: boolean;\r\n    isHighlighted: boolean;\r\n    likeCount: number;\r\n    likeId: string | undefined;\r\n};\r\n\r\ntype FirebaseQuestions = Record<string, {\r\n    author: {\r\n        name: string;\r\n        avatar: string;\r\n    }\r\n    content: string;\r\n    isAnswered: boolean;\r\n    isHighlighted: boolean;\r\n    likes: Record<string, {\r\n        authorId: string,\r\n    }>;\r\n}>;\r\n\r\nexport function useRoom(roomId: String) {\r\n    const { user } = useAuth();\r\n    const [questions, setQuestions] = useState<QuestionType[]>([]);\r\n    const [title, setTitle] = useState('');\r\n\r\n    useEffect(() => {\r\n        const roomRef = database.ref(`rooms/${roomId}`);\r\n\r\n        roomRef.on('value', room => {\r\n            const databaseRoom = room.val();\r\n            const firebaseQuestions: FirebaseQuestions = databaseRoom.questions ?? {};\r\n\r\n            const parsedQuestions = Object.entries(firebaseQuestions).map(([key, value]) => {\r\n                return {\r\n                    id: key,\r\n                    content: value.content,\r\n                    author: value.author,\r\n                    isHighlighted: value.isHighlighted,\r\n                    isAnswered: value.isAnswered,\r\n                    likeCount: Object.values(value.likes ?? {}).length,\r\n                    likeId: Object.entries(value.likes ?? {}).find(([key, like]) => like.authorId === user?.id)?.[0],\r\n                }\r\n            });\r\n            setTitle(databaseRoom.title);\r\n            setQuestions(parsedQuestions);\r\n        });\r\n        return () => {\r\n            roomRef.off('value');\r\n        };\r\n    }, [roomId, user?.id]);\r\n\r\n    return { questions, title };\r\n}","import { useHistory, useParams } from 'react-router-dom';\r\nimport logoImg from '../assets/images/logo.svg';\r\nimport deleteImg from '../assets/images/delete.svg';\r\nimport checkImg from '../assets/images/check.svg';\r\nimport answerImg from '../assets/images/answer.svg';\r\nimport { Button } from '../components/Button';\r\nimport { Question } from '../components/Question';\r\nimport { RoomCode } from '../components/RoomCode';\r\n//import { useAuth } from '../hooks/useAuth';\r\nimport { useRoom } from '../hooks/useRoom';\r\n\r\nimport '../styles/room.scss';\r\nimport { database } from '../services/firebase';\r\n\r\n\r\ntype RoomParams = {\r\n  id: string;\r\n};\r\n\r\nexport function AdminRoom() {\r\n  //  const { user } = useAuth();\r\n  const history = useHistory();\r\n  const params = useParams<RoomParams>();\r\n  const roomId = params.id;\r\n  const { title, questions } = useRoom(roomId);\r\n\r\n  async function handleDeleteQuestion(questionId: string) {\r\n    if (window.confirm('Deseja realmente excluir essa pergunta?')) {\r\n      await database.ref(`rooms/${roomId}/questions/${questionId}`).remove();\r\n    }\r\n  };\r\n\r\n  async function handleEndRoom() {\r\n    await database.ref(`rooms/${roomId}`).update({\r\n      endedAt: new Date(),\r\n    });\r\n\r\n    history.push('/');\r\n  }\r\n\r\n  async function handleCheckQuestionAsAnswered(questionId: string) {\r\n    await database.ref(`rooms/${roomId}/questions/${questionId}`).update({\r\n      isAnswered: true,\r\n    });\r\n  }\r\n\r\n  async function handleHighlightQuestion(questionId: string) {\r\n    await database.ref(`rooms/${roomId}/questions/${questionId}`).update({\r\n      isHighlighted: true,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div id=\"page-room\">\r\n      <header>\r\n        <div className=\"content\">\r\n          <img src={logoImg} alt=\"LetMeAsk\" />\r\n          <div>\r\n            <RoomCode code={roomId} />\r\n            <Button onClick={handleEndRoom} isOutlined>Encerrar sala</Button>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <main className=\"main-room\">\r\n        <div className=\"room-title\">\r\n          <h1>Sala {title}</h1>\r\n          {questions.length > 0 && <span>{questions.length} pergunta(s)</span>}\r\n        </div>\r\n        <div className=\"question-list\">\r\n          {questions.map(question => {\r\n            return (\r\n              <Question\r\n                key={question.id}\r\n                content={question.content}\r\n                author={question.author}\r\n                isAnswered={question.isAnswered}\r\n                isHighlighted={question.isHighlighted}\r\n              >\r\n                {!question.isAnswered && (\r\n                  <>\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() => handleCheckQuestionAsAnswered(question.id)}\r\n                    >\r\n                      <img src={checkImg} alt=\"Marcar pergunta como respondida\" />\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() => handleHighlightQuestion(question.id)}\r\n                    >\r\n                      <img src={answerImg} alt=\"Dar destaque à pergunta\" />\r\n                    </button>\r\n                  </>\r\n                )}\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => handleDeleteQuestion(question.id)}\r\n                >\r\n                  <img src={deleteImg} alt=\"Remover pergunta\" />\r\n                </button>\r\n              </Question>\r\n            );\r\n          })}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}","export default __webpack_public_path__ + \"static/media/illustration.ae7276f0.svg\";","export default __webpack_public_path__ + \"static/media/google-icon.df15d8e5.svg\";","import { useHistory } from 'react-router-dom';\r\nimport { FormEvent } from 'react';\r\n\r\nimport imgHome from '../assets/images/illustration.svg';\r\nimport imgLogo from '../assets/images/logo.svg';\r\nimport imgLogoGoogle from '../assets/images/google-icon.svg';\r\n\r\nimport '../styles/auth.scss'\r\nimport { Button } from '../components/Button';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport { useState } from 'react';\r\nimport { database } from '../services/firebase';\r\n\r\nexport function Home() {\r\n    const history = useHistory();\r\n    const { user, signInWithGoogle } = useAuth();\r\n    const [RoomCode, setRoomCode] = useState('');\r\n\r\n    async function handleCreateRoom() {\r\n        if (!user) {\r\n            await signInWithGoogle();\r\n        }\r\n        history.push('/rooms/new');\r\n    }\r\n\r\n    async function handleJoinRoom(event: FormEvent) {\r\n        event.preventDefault();\r\n\r\n        if (RoomCode.trim() === '') {\r\n            return;\r\n        }\r\n\r\n        const roomRef = await database.ref(`rooms/${RoomCode}`).get();\r\n\r\n        if (!roomRef.exists()) {\r\n            alert('Room does not exists.');\r\n            return;\r\n        }\r\n\r\n        if (roomRef.val().endedAt) {\r\n            alert('Room already closed.');\r\n            return;\r\n        }\r\n\r\n        history.push(`/rooms/${RoomCode}`);\r\n    }\r\n\r\n    return (\r\n        <div id=\"page-auth\">\r\n            <aside>\r\n                <img src={imgHome} alt=\"Imagem Principal\" />\r\n                <strong>Crie sua sala Q&amp;A ao-vivo</strong>\r\n                <p>Tire suas duvidas em tempo real</p>\r\n            </aside>\r\n            <main className=\"main-auth\">\r\n                <div className=\"main-content\">\r\n                    <img src={imgLogo} alt=\"LetMeAsk\" />\r\n                    <button className=\"create-room\" onClick={handleCreateRoom}>\r\n                        <img src={imgLogoGoogle} alt=\"Logo Google\" />\r\n                        Crie sua sala com o Google\r\n                    </button>\r\n                    <div className=\"separator\">ou entre em uma sala</div>\r\n                    <form onSubmit={handleJoinRoom}>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Informe o código da sala\"\r\n                            onChange={event => setRoomCode(event.target.value)}\r\n                            value={RoomCode} />\r\n                        <Button type=\"submit\">Entrar na sala</Button>\r\n                    </form>\r\n                </div>\r\n            </main>\r\n        </div>\r\n    )\r\n}","import { FormEvent } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport imgHome from '../assets/images/illustration.svg';\r\nimport imgLogo from '../assets/images/logo.svg';\r\nimport '../styles/auth.scss'\r\nimport { Button } from '../components/Button';\r\nimport { useState } from 'react';\r\nimport { database } from '../services/firebase';\r\nimport { useAuth } from '../hooks/useAuth';\r\n\r\nexport function NewRoom() {\r\n    const { user } = useAuth();\r\n    const [newRoow, setNewRoom] = useState('');\r\n    const history = useHistory();\r\n    async function handleCreateNewRoom(event: FormEvent) {\r\n        event.preventDefault();\r\n        \r\n        if (newRoow.trim() === '') {\r\n            return;\r\n        }\r\n\r\n        const roomRef = database.ref('rooms');\r\n        const firebaseRoom = await roomRef.push({\r\n            title: newRoow,\r\n            authorId: user?.id\r\n        }) \r\n\r\n        history.push(`/rooms/${firebaseRoom.key}`);\r\n    }\r\n\r\n    return (\r\n        <div id=\"page-auth\">\r\n            <aside>\r\n                <img src={imgHome} alt=\"Imagem Principal\" />\r\n                <strong>Crie sua sala Q&amp;A ao-vivo</strong>\r\n                <p>Tire suas duvidas em tempo real</p>\r\n            </aside>\r\n            <main className=\"main-auth\">\r\n                <div className=\"main-content\">\r\n                    <img src={imgLogo} alt=\"LetMeAsk\" />\r\n                    <form onSubmit={handleCreateNewRoom}>\r\n                        <h2>Criar uma nova sala</h2>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Informe o nome da sala\"\r\n                            onChange={event => setNewRoom(event.target.value)}\r\n                            value={newRoow} />\r\n                        <Button type=\"submit\">Criar Sala</Button>\r\n                    </form>\r\n                    <p>Deseja acessar uma sala já existente? <Link to=\"/\">Clique aqui</Link></p>\r\n                </div>\r\n            </main>\r\n        </div>\r\n    )\r\n}","import { FormEvent, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport logoImg from '../assets/images/logo.svg';\r\nimport { Button } from '../components/Button';\r\nimport { Question } from '../components/Question';\r\nimport { RoomCode } from '../components/RoomCode';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport { useRoom } from '../hooks/useRoom';\r\nimport { database } from '../services/firebase';\r\n\r\nimport '../styles/room.scss';\r\n\r\n\r\ntype RoomParams = {\r\n  id: string;\r\n};\r\n\r\nexport function Room() {\r\n  const { user } = useAuth();\r\n  const params = useParams<RoomParams>();\r\n  const roomId = params.id;\r\n  const [newQuestion, setNewQuestion] = useState('')\r\n  const { title, questions } = useRoom(roomId);\r\n\r\n  async function handleSendQuestion(event: FormEvent) {\r\n    event.preventDefault();\r\n    if (newQuestion.trim() === '') {\r\n      return;\r\n    }\r\n\r\n    if (!user) {\r\n      throw new Error('You must be logged in');\r\n    }\r\n\r\n    const question = {\r\n      content: newQuestion,\r\n      author: {\r\n        name: user.name,\r\n        avatar: user.avatar,\r\n      },\r\n      isHighlighted: false,\r\n      isAnswered: false,\r\n    };\r\n\r\n    await database.ref(`rooms/${roomId}/questions`).push(question);\r\n\r\n    setNewQuestion('');\r\n  };\r\n\r\n  async function handleLikeQuestion(questionId: string, likeId: string | undefined) {\r\n    if (likeId) {\r\n      await database.ref(`rooms/${roomId}/questions/${questionId}/likes/${likeId}`).remove();\r\n    } else {\r\n      await database.ref(`rooms/${roomId}/questions/${questionId}/likes`).push({\r\n        authorId: user?.id,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"page-room\">\r\n      <header>\r\n        <div className=\"content\">\r\n          <img src={logoImg} alt=\"LetMeAsk\" />\r\n          <RoomCode code={roomId} />\r\n        </div>\r\n      </header>\r\n\r\n      <main className=\"main-room\">\r\n        <div className=\"room-title\">\r\n          <h1>Sala {title}</h1>\r\n          {questions.length > 0 && <span>{questions.length} pergunta(s)</span>}\r\n        </div>\r\n        <form onSubmit={handleSendQuestion}>\r\n          <textarea placeholder=\"O que você quer perguntar?\"\r\n            onChange={event => setNewQuestion(event.target.value)}\r\n            value={newQuestion} />\r\n          <div className=\"form-footer\">\r\n            {user ? (\r\n              <div className=\"user-info\">\r\n                <img src={user.avatar} alt={user.name} />\r\n                <span>{user.name}</span>\r\n              </div>\r\n            ) : (\r\n              <span>Para enviar uma pergunta,\r\n                <button>\r\n                  faça seu login.\r\n                </button>\r\n              </span>\r\n            )}\r\n            <Button className=\"button buttonPrincipal\" type=\"submit\" disabled={!user}>Enviar pergunta</Button>\r\n          </div>\r\n        </form>\r\n        <div className=\"question-list\">\r\n          {questions.map(question => {\r\n            return (\r\n              <Question\r\n                key={question.id}\r\n                content={question.content}\r\n                author={question.author}\r\n                isAnswered={question.isAnswered}\r\n                isHighlighted={question.isHighlighted}\r\n              >\r\n                {!question.isAnswered && (\r\n                  <button\r\n                    className={`like-button ${question.likeId ? 'liked' : ''}`}\r\n                    type=\"button\"\r\n                    aria-label=\"Marcar como gostei\"\r\n                    onClick={() => handleLikeQuestion(question.id, question.likeId)}\r\n                  >\r\n                    {question.likeCount > 0 && <span>{question.likeCount}</span>}\r\n                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                      <path d=\"M7 22H4C3.46957 22 2.96086 21.7893 2.58579 21.4142C2.21071 21.0391 2 20.5304 2 20V13C2 12.4696 2.21071 11.9609 2.58579 11.5858C2.96086 11.2107 3.46957 11 4 11H7M14 9V5C14 4.20435 13.6839 3.44129 13.1213 2.87868C12.5587 2.31607 11.7956 2 11 2L7 11V22H18.28C18.7623 22.0055 19.2304 21.8364 19.5979 21.524C19.9654 21.2116 20.2077 20.7769 20.28 20.3L21.66 11.3C21.7035 11.0134 21.6842 10.7207 21.6033 10.4423C21.5225 10.1638 21.3821 9.90629 21.1919 9.68751C21.0016 9.46873 20.7661 9.29393 20.5016 9.17522C20.2371 9.0565 19.9499 8.99672 19.66 9H14Z\" stroke=\"#737380\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\r\n                    </svg>\r\n                  </button>\r\n                )}\r\n              </Question>\r\n            );\r\n          })}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}","import { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { AuthContextProvider } from './contexts/AuthContext';\nimport { AdminRoom } from './pages/AdminRoom';\nimport { Home } from './pages/Home';\nimport { NewRoom } from './pages/NewRoom';\nimport { Room } from './pages/Room';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <AuthContextProvider>\n        <Switch>\n          <Route path=\"/\" exact component={Home}></Route>\n          <Route path=\"/rooms/new\" component={NewRoom}></Route>\n          <Route path=\"/rooms/:id\" component={Room}></Route>\n          <Route path=\"/admin/rooms/:id\" component={AdminRoom}></Route>\n        </Switch>\n      </AuthContextProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './services/firebase';\r\nimport './styles/global.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}